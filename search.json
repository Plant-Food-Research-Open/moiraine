[{"path":"https://bookish-disco-p832pyq.pages.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 moiraine authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Olivia Angelin-Bonnet. Author, maintainer.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Angelin-Bonnet O (2024). moiraine: Construction Reproducible Pipelines Testing Comparing Multi-omics Integration Tools. R package version 0.0.0.9000, https://bookish-disco-p832pyq.pages.github.io/, https://github.com/PlantandFoodResearch/moiraine.","code":"@Manual{,   title = {moiraine: Construction of Reproducible Pipelines for Testing and Comparing Multi-omics Integration Tools},   author = {Olivia Angelin-Bonnet},   year = {2024},   note = {R package version 0.0.0.9000, https://bookish-disco-p832pyq.pages.github.io/},   url = {https://github.com/PlantandFoodResearch/moiraine}, }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/index.html","id":"moiraine","dir":"","previous_headings":"","what":"Construction of Reproducible Pipelines for Testing and Comparing Multi-omics Integration Tools","title":"Construction of Reproducible Pipelines for Testing and Comparing Multi-omics Integration Tools","text":"moiraine package facilitating construction reproducible analysis pipeline multi-omics data integration. provides functions automate data import, pre-processing, transformation, integration several tools. relies targets package generate reproducible workflows. moiraine currently supports multi-omics data integration : sPLS DIABLO mixOmics package; sO2PLS omicsPLS package; MOFA MEFISTO MOFA2 package.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Construction of Reproducible Pipelines for Testing and Comparing Multi-omics Integration Tools","text":"can install development version moiraine GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"PlantandFoodResearch/moiraine\")"},{"path":"https://bookish-disco-p832pyq.pages.github.io/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Construction of Reproducible Pipelines for Testing and Comparing Multi-omics Integration Tools","text":"get started, create new analysis pipeline associated report working directory : using moiraine, encourage get familiar targets package; manual great place start.","code":"library(moiraine)  create_targets_pipeline() create_report(\"integration_analysis_report.Rmd\")"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/MetabolomeSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to contain objects describing high-throughput metabolomics assays. — MetabolomeSet","title":"Class to contain objects describing high-throughput metabolomics assays. — MetabolomeSet","text":"Container high-throughput metabolomics assays experimental metadata. MetabolomeSet class derived Biobase::eSet().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/PhenotypeSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class to contain objects describing phenotypic assays. — PhenotypeSet","title":"Class to contain objects describing phenotypic assays. — PhenotypeSet","text":"Container phenotypic assays experimental metadata. PhenotypeSet class derived Biobase::eSet().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-MultiDataSet-MetabolomeSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a MetabolomeSet to a MultiDataSet object. — add_metabo,MultiDataSet,MetabolomeSet-method","title":"Adds a MetabolomeSet to a MultiDataSet object. — add_metabo,MultiDataSet,MetabolomeSet-method","text":"Adds MetabolomeSet MultiDataSet object.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-MultiDataSet-MetabolomeSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a MetabolomeSet to a MultiDataSet object. — add_metabo,MultiDataSet,MetabolomeSet-method","text":"","code":"# S4 method for MultiDataSet,MetabolomeSet add_metabo(object, met_set, warnings = TRUE, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-MultiDataSet-MetabolomeSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a MetabolomeSet to a MultiDataSet object. — add_metabo,MultiDataSet,MetabolomeSet-method","text":"object MultiDataSet::MultiDataSet object. met_set MetabolomeSet object. warnings Logical, warnings displayed? Default TRUE. ... arguments passed MultiDataSet::add_eset() function.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-MultiDataSet-MetabolomeSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a MetabolomeSet to a MultiDataSet object. — add_metabo,MultiDataSet,MetabolomeSet-method","text":"new MultiDataSet::MultiDataSet object slot filled.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to add a MetabolomeSet to a MultiDataSet object. — add_metabo","title":"Method to add a MetabolomeSet to a MultiDataSet object. — add_metabo","text":"Method add MetabolomeSet MultiDataSet object.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to add a MetabolomeSet to a MultiDataSet object. — add_metabo","text":"","code":"add_metabo(object, met_set, warnings = TRUE, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to add a MetabolomeSet to a MultiDataSet object. — add_metabo","text":"object MultiDataSet::MultiDataSet object. met_set MetabolomeSet object. warnings Logical, warnings displayed? Default TRUE. ... arguments passed MultiDataSet::add_eset() function.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_metabo-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to add a MetabolomeSet to a MultiDataSet object. — add_metabo","text":"new MultiDataSet::MultiDataSet object slot filled.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-MultiDataSet-PhenotypeSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a PhenotypeSet to a MultiDataSet object. — add_pheno,MultiDataSet,PhenotypeSet-method","title":"Adds a PhenotypeSet to a MultiDataSet object. — add_pheno,MultiDataSet,PhenotypeSet-method","text":"Adds PhenotypeSet MultiDataSet object.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-MultiDataSet-PhenotypeSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a PhenotypeSet to a MultiDataSet object. — add_pheno,MultiDataSet,PhenotypeSet-method","text":"","code":"# S4 method for MultiDataSet,PhenotypeSet add_pheno(object, pheno_set, warnings = TRUE, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-MultiDataSet-PhenotypeSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a PhenotypeSet to a MultiDataSet object. — add_pheno,MultiDataSet,PhenotypeSet-method","text":"object MultiDataSet::MultiDataSet object. pheno_set PhenotypeSet object. warnings Logical, warnings displayed? Default TRUE. ... arguments passed MultiDataSet::add_eset() function.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-MultiDataSet-PhenotypeSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a PhenotypeSet to a MultiDataSet object. — add_pheno,MultiDataSet,PhenotypeSet-method","text":"new MultiDataSet::MultiDataSet object slot filled.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to add a PhenotypeSet to a MultiDataSet object. — add_pheno","title":"Method to add a PhenotypeSet to a MultiDataSet object. — add_pheno","text":"Method add PhenotypeSet MultiDataSet object.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to add a PhenotypeSet to a MultiDataSet object. — add_pheno","text":"","code":"add_pheno(object, pheno_set, warnings = TRUE, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to add a PhenotypeSet to a MultiDataSet object. — add_pheno","text":"object MultiDataSet::MultiDataSet object. pheno_set PhenotypeSet object. warnings Logical, warnings displayed? Default TRUE. ... arguments passed MultiDataSet::add_eset() function.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/add_pheno-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to add a PhenotypeSet to a MultiDataSet object. — add_pheno","text":"new MultiDataSet::MultiDataSet object slot filled.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_multiomics_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a MultiDataSet object to store multi-omics data — create_multiomics_set","title":"Create a MultiDataSet object to store multi-omics data — create_multiomics_set","text":"Creates MultiDataSet object list Biobase Set objects store different omics sets.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_multiomics_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a MultiDataSet object to store multi-omics data — create_multiomics_set","text":"","code":"create_multiomics_set(sets_list, datasets_names = NULL, show_warnings = TRUE)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_multiomics_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a MultiDataSet object to store multi-omics data — create_multiomics_set","text":"sets_list List Biobase Set objects, created via create_omics_set. Currently accepted ojects: SnpSet, ExpressionSet, MetabolomeSet, PhenotypeSet. datasets_names Optional, vector character, name Set object. appended data type resulting object. sets_list list contains several objects data type (e.g. several SnpSets), names must unique. \"\" provided, name appended data type corresponding dataset. show_warnings Logical, warnings displayed adding set MultiDataSet object? Default value TRUE.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_multiomics_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a MultiDataSet object to store multi-omics data — create_multiomics_set","text":"MultiDataSet-class.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Biobase set object to store omics data — create_omics_set","title":"Create a Biobase set object to store omics data — create_omics_set","text":"Creates Biobase object store omics dataset associated samples features information.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Biobase set object to store omics data — create_omics_set","text":"","code":"create_omics_set(   dataset,   omics_type,   features_metadata = NULL,   samples_metadata = NULL )"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Biobase set object to store omics data — create_omics_set","text":"dataset Matrix, omics dataset matrix form features rows samples columns. omics_type Character, type omics data stored? Possible values 'genomics', 'transcriptomics', 'metabolomics' 'phenomics'. features_metadata Data.frame, feature annotation dataframe features rows information features columns. number rows rownames must match dataset matrix. samples_metadata Data.frame, samples information dataframe samples rows information samples columns. number rows rownames must match number columns colnames dataset matrix.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Biobase set object to store omics data — create_omics_set","text":"omics_type = 'genomics': SnpSet object. omics_type = 'transcriptomics': ExpressionSet object. omics_type = 'metabolomics': MetabolomeSet object. omics_type = 'phenomics': PhenotypeSet object.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Biobase set object to store omics data — create_omics_set","text":"","code":"if (FALSE) { data_geno <- import_dataset_csv(\"genotype_dataset.csv\",   col_id = \"Marker\",   features_as_rows = TRUE ) geno_info_features <- import_fmetadata_csv(\"genotype_features_info.csv\",   col_id = \"Marker\",   features_as_rows = TRUE ) samples_information <- import_smetadata_csv(\"samples_information.csv\",   col_id = \"Sample\" ) create_omics_set(   dataset = data_geno,   features_metadata = geno_info_features,   samples_metadata = samples_information,   omics_type = \"genomics\" ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Target factory for omics set creation — create_omics_set_factory","title":"Target factory for omics set creation — create_omics_set_factory","text":"Creates list targets generate omics sets targets containing datasets, features samples metadata.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target factory for omics set creation — create_omics_set_factory","text":"","code":"create_omics_set_factory(   datasets,   omics_types,   features_metadatas = NULL,   samples_metadatas = NULL,   target_name_suffixes = NULL )"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target factory for omics set creation — create_omics_set_factory","text":"datasets Vector symbols, names targets containing omics datasets. omics_types Character vector, type omics data stored dataset? Possible values 'genomics', 'transcriptomics', 'metabolomics' 'phenomics'. features_metadatas Vector symbols, names targets containing features metadata data-frame associated omics dataset. Use NULL feature metadata exists dataset. samples_metadatas Vector symbols, names targets containing samples metadata data-frame associated omics dataset. Use NULL samples metadata exists dataset. target_name_suffixes Vector symbols, suffix add name targets created target factory dataset. none provided, suffixes extracted datasets argument. Default value NULL.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target factory for omics set creation — create_omics_set_factory","text":"list target objects, three datasets provided, target_name_suffixes = c(\"geno\", \"transcripto\", \"metabo\"), following targets returned: set_geno, set_transcripto set_metabo.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/create_omics_set_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target factory for omics set creation — create_omics_set_factory","text":"","code":"if (FALSE) { ## in the _targets.R library(MOITestPipeline)  list(   ## targets to import the different datasets    ## Example where genomics dataset has no features metadata information   create_omics_set_factory(     datasets = c(data_geno, data_transcripto),     omics_types = c(\"genomics\", \"transcriptomics\"),     features_metadata = c(NULL, fmeta_transcripto),     samples_metadata = c(smeta_geno, smeta_transcripto)   ) ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata","text":"Checks whether variable name corresponds column samples metadata corresponding dataset. one value provided, used datasets.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata","text":"","code":".check_input_var_smetadata(x, mo_data)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata","text":"x Named character list, one element per dataset, element giving name column samples metadata corresponding dataset. names correspond dataset names mo_data. checked .make_var_list(). mo_data MultiDataSet object containing samples information datasets. checked .check_input_multidataset().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata","text":"Nothing. throw error need .","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata_common","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata_common","text":"Checks whether variable name corresponds column samples metadata corresponding dataset. one value provided, used datasets.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata_common","text":"","code":".check_input_var_smetadata_common(x, mo_data)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata_common","text":"x Character, name column samples metadata. mo_data MultiDataSet object containing samples information datasets. checked .check_input_multidataset().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/dot-check_input_var_smetadata_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that variable names corresponds to columns in samples metadata — .check_input_var_smetadata_common","text":"Nothing. throw error need .","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/hclust_matrix_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical clustering of matrix rows — hclust_matrix_rows","title":"Hierarchical clustering of matrix rows — hclust_matrix_rows","text":"Performs hierarchical clustering rows matrix. Code inspired ComplexHeatmap package.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/hclust_matrix_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical clustering of matrix rows — hclust_matrix_rows","text":"","code":"hclust_matrix_rows(x)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/hclust_matrix_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical clustering of matrix rows — hclust_matrix_rows","text":"x Matrix.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/hclust_matrix_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical clustering of matrix rows — hclust_matrix_rows","text":"dendrogram.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a dataset from a csv file — import_dataset_csv","title":"Import a dataset from a csv file — import_dataset_csv","text":"Reads csv file returns matrix rows corresponds features (e.g. markers, genes, phenotypes...) columns correspond samples/observations.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a dataset from a csv file — import_dataset_csv","text":"","code":"import_dataset_csv(file, col_id, features_as_rows = TRUE, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a dataset from a csv file — import_dataset_csv","text":"file Character, path dataset csv file. col_id Character, name column file contains ID rows (.e. feature IDs features_as_rows TRUE, sample IDs features_as_rows FALSE). features_as_rows Logical, rows file correspond features? Default value TRUE, .e. file contains features rows samples columns. ... arguments passed readr::read_csv().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a dataset from a csv file — import_dataset_csv","text":"matrix samples columns features rows. Feature IDs used row names sample IDs column names.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a dataset from a csv file — import_dataset_csv","text":"","code":"if (FALSE) { data_geno <- import_dataset_csv(   \"genotype_dataset.csv\",   col_id = \"Marker\",   features_as_rows = TRUE ) data_pheno <- import_dataset_csv(   \"phenotype_dataset.csv\",   col_id = \"Sample\",   features_as_rows = FALSE ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Target factory for csv datasets import — import_dataset_csv_factory","title":"Target factory for csv datasets import — import_dataset_csv_factory","text":"Creates list targets track file import dataset csv file.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target factory for csv datasets import — import_dataset_csv_factory","text":"","code":"import_dataset_csv_factory(   files,   col_ids,   features_as_rowss,   target_name_suffixes )"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target factory for csv datasets import — import_dataset_csv_factory","text":"files Character vector, vector paths dataset csv files. col_ids Character vector, name column file contains ID rows (.e. feature IDs value features_as_rowss TRUE corresponding dataset, sample IDs value features_as_rowss FALSE). features_as_rowss Logical vector, rows file correspond features? target_name_suffixes Character vector, suffix add name targets created target factory dataset.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target factory for csv datasets import — import_dataset_csv_factory","text":"list target objects. example, two files import target_name_suffixes = c(\"geno\", \"transcripto\"), factory returns following targets: dataset_file_geno dataset_file_transcripto: targets tracking genomics dataset file transcriptomics dataset file, respectively. data_geno data_transcripto: targets import genomics transcriptomics dataset, respectively.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_dataset_csv_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target factory for csv datasets import — import_dataset_csv_factory","text":"","code":"if (FALSE) { ## in the _targets.R library(MOITestPipeline)  list(   import_dataset_csv_factory(     c(       \"data/genotype_data.csv\",       \"data/rnaseq_data.csv\"     ),     col_ids = c(\"Marker\", \"Sample\"),     features_as_rows = c(TRUE, FALSE),     target_name_suffixes = c(\"geno\", \"transcripto\")   ) ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import feature metadata from a csv file — import_fmetadata_csv","title":"Import feature metadata from a csv file — import_fmetadata_csv","text":"Reads csv file returns dataframe rows correspond features (e.g. markers, genes, phenotypes...) columns correspond information features. Non-ASCII characters replaced ASCII equivalents (using stringi textclean packages).","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import feature metadata from a csv file — import_fmetadata_csv","text":"","code":"import_fmetadata_csv(file, col_id, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import feature metadata from a csv file — import_fmetadata_csv","text":"file Character, path dataset csv file. col_id Character, name column file contains feature IDs. ... arguments passed readr::read_csv().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import feature metadata from a csv file — import_fmetadata_csv","text":"data-frame features rows features information columns. Feature IDs used row names.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import feature metadata from a csv file — import_fmetadata_csv","text":"","code":"if (FALSE) { geno_info_features <- import_fmetadata_csv(   \"genotype_features_info.csv\",   col_id = \"Marker\" ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Target factory for csv features metadata import — import_fmetadata_csv_factory","title":"Target factory for csv features metadata import — import_fmetadata_csv_factory","text":"Creates list targets track file import features metadata csv file.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target factory for csv features metadata import — import_fmetadata_csv_factory","text":"","code":"import_fmetadata_csv_factory(files, col_ids, target_name_suffixes)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target factory for csv features metadata import — import_fmetadata_csv_factory","text":"files Character vector, vector paths features metadata csv files. col_ids Character vector, name column file contains features ID. target_name_suffixes Character vector, suffix add name targets created target factory dataset.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target factory for csv features metadata import — import_fmetadata_csv_factory","text":"list target objects. example, two files import target_name_suffixes = c(\"geno\", \"transcripto\"), factory returns following targets: fmetadata_file_geno fmetadata_file_transcripto: targets tracking genomics transcriptomics features metadata files, respectively. fmetadata_geno fmetadata_transcripto: targets import genomics transcriptomics features metadata dataset.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_csv_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target factory for csv features metadata import — import_fmetadata_csv_factory","text":"","code":"if (FALSE) { ## in the _targets.R library(MOITestPipeline)  list(   import_fmetadata_csv_factory(     c(       \"data/genotype_fmetadata.csv\",       \"data/rnaseq_fmetadata.csv\"     ),     col_ids = c(\"Marker\", \"Info\"),     target_name_suffixes = c(\"geno\", \"transcripto\")   ) ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff.html","id":null,"dir":"Reference","previous_headings":"","what":"Import features metadata from a GFF/GTF file — import_fmetadata_gff","title":"Import features metadata from a GFF/GTF file — import_fmetadata_gff","text":"Reads GFF GTF annotation file returns dataframe rows correspond features (e.g. genes transcripts) columns correspond information features. Non-ASCII characters replaced ASCII equivalents (using stringi textclean packages).","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import features metadata from a GFF/GTF file — import_fmetadata_gff","text":"","code":"import_fmetadata_gff(file, feature_type, add_fields = NULL)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import features metadata from a GFF/GTF file — import_fmetadata_gff","text":"file Character, path dataset GFF GTF file. feature_type Character, type feature extract annotation file. Currently supports 'genes' 'transcripts'. add_fields Character vector, fields GFF/GTF file extract imported default (use run function realised fields extracted function).","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import features metadata from a GFF/GTF file — import_fmetadata_gff","text":"data-frame features rows features information columns. Feature IDs used row names.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import features metadata from a GFF/GTF file — import_fmetadata_gff","text":"","code":"if (FALSE) { import_fmetadata_gff(   \"bos_taurus_gene_model.gff3\",   \"genes\",   add_fields = c(\"name\", \"description\") ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Target factory for GFF/GTF features metadata import — import_fmetadata_gff_factory","title":"Target factory for GFF/GTF features metadata import — import_fmetadata_gff_factory","text":"Creates list targets track file import features metadata GFF/GTF file.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target factory for GFF/GTF features metadata import — import_fmetadata_gff_factory","text":"","code":"import_fmetadata_gff_factory(   files,   feature_types,   add_fieldss,   target_name_suffixes )"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target factory for GFF/GTF features metadata import — import_fmetadata_gff_factory","text":"files Character vector, vector paths samples metadata GFF GTF files. feature_types Character vector, type features extract annotation file. Currently supports 'genes' 'transcripts'. add_fieldss List, element character vector  field names GFF/GTF file extract imported default. character vector provided, used files read . target_name_suffixes Character vector, suffix add name targets created target factory dataset.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target factory for GFF/GTF features metadata import — import_fmetadata_gff_factory","text":"list target objects. example, two files import target_name_suffixes = c(\"geno\", \"transcripto\"), factory returns following targets: fmetadata_file_geno fmetadata_file_transcripto: targets tracking genomics transcriptomics annotation files, respectively. fmetadata_geno fmetadata_transcripto: targets import genomics transcriptomics features metadata datasets, respectively.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_fmetadata_gff_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target factory for GFF/GTF features metadata import — import_fmetadata_gff_factory","text":"","code":"if (FALSE) { ## in the _targets.R library(MOITestPipeline)  list(   import_fmetadata_gff_factory(     c(       \"data/annotation.gff\",       \"data/annotationv2.gtf\"     ),     feature_types = c(\"genes\", \"transcripts\"),     add_fieldss = list(       c(\"gene_name\", \"gene_custom_ID\"),       c(\"transcript_name\")     ),     target_name_suffixes = c(\"geno\", \"transcripto\")   ) ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import samples metadata from a csv file — import_smetadata_csv","title":"Import samples metadata from a csv file — import_smetadata_csv","text":"Reads csv file returns dataframe rows correspond features (e.g. markers, genes, phenotypes...) columns correspond information features.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import samples metadata from a csv file — import_smetadata_csv","text":"","code":"import_smetadata_csv(file, col_id, ...)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import samples metadata from a csv file — import_smetadata_csv","text":"file Character, path dataset csv file. col_id Character, name column file contains ID rows (.e. sample IDs). ... arguments passed readr::read_csv().","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import samples metadata from a csv file — import_smetadata_csv","text":"data-frame samples rows samples properties columns. Sample IDs used rownames.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import samples metadata from a csv file — import_smetadata_csv","text":"","code":"if (FALSE) { samples_information <- import_smetadata_csv(   \"samples_information.csv\",   col_id = \"Sample\" ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Target factory for csv samples metadata import — import_smetadata_csv_factory","title":"Target factory for csv samples metadata import — import_smetadata_csv_factory","text":"Creates list targets track file import samples metadata csv file.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target factory for csv samples metadata import — import_smetadata_csv_factory","text":"","code":"import_smetadata_csv_factory(files, col_ids, target_name_suffixes)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target factory for csv samples metadata import — import_smetadata_csv_factory","text":"files Character vector, vector paths samples metadata csv files. col_ids Character vector, name column file contains ID rows (.e. sample IDs). target_name_suffixes Character vector, suffix add name targets created target factory dataset.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target factory for csv samples metadata import — import_smetadata_csv_factory","text":"list target objects. example, two files import target_name_suffixes = c(\"geno\", \"transcripto\"), factory returns following targets: smetadata_file_geno smetadata_file_transcripto: targets tracking genomics transcriptomics samples metadata files, respectively. smetadata_geno smetadata_transcripto: targets import genomics transcriptomics samples metadata datasets, respectively.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/import_smetadata_csv_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target factory for csv samples metadata import — import_smetadata_csv_factory","text":"","code":"if (FALSE) { ## in the _targets.R library(MOITestPipeline)  list(   import_smetadata_csv_factory(     c(       \"data/genotype_smetadata.csv\",       \"data/rnaseq_smetadata.csv\"     ),     col_ids = c(\"Sample\", \"SampleIDs\"),     target_name_suffixes = c(\"geno\", \"transcripto\")   ) ) }"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/is_equal_or_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Check null or equality — is_equal_or_null","title":"Check null or equality — is_equal_or_null","text":"Tests whether object NULL equal value.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/is_equal_or_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check null or equality — is_equal_or_null","text":"","code":"is_equal_or_null(x, val)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/is_equal_or_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check null or equality — is_equal_or_null","text":"x object test. val Value compare ","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/is_equal_or_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check null or equality — is_equal_or_null","text":"TRUE FALSE.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/options_list_as_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns options list as a tibble — options_list_as_tibble","title":"Returns options list as a tibble — options_list_as_tibble","text":"Transforms list options (parameters) tibble name options (parameters) one column, value second column. Vector values collapsed span one column.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/options_list_as_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns options list as a tibble — options_list_as_tibble","text":"","code":"options_list_as_tibble(options_list)"},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/options_list_as_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns options list as a tibble — options_list_as_tibble","text":"options_list named list, element corresponds one option parameter name element corresponds name option/parameter.","code":""},{"path":"https://bookish-disco-p832pyq.pages.github.io/reference/options_list_as_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns options list as a tibble — options_list_as_tibble","text":"tibble, Parameter column giving list options parameters, Value column giving values corresponding option parameter.","code":""}]
